name: 📆 🚀 Build & Push Image

on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      aws-role-to-assume:
        required: true
        type: string
      image-name:
        required: true
        type: string
      image-tag:
        required: true
        type: string
      build-spec:
        required: false
        type: string
        default: Dockerfile
      build-args:
        required: false
        type: string

    outputs:
      tagged-image:
        description: 'Tagged image with specific version'
        value: ${{ jobs.build-push.outputs.tagged-image }}
      latest-image:
        description: 'Tagged image as latest variant'
        value: ${{ jobs.build-push.outputs.latest-image }}

jobs:
  build-push:
    runs-on: self-hosted
    timeout-minutes: 10

    outputs:
      tagged-image: ${{ steps.buildx.outputs.taggedImage }}
      latest-image: ${{ steps.buildx.outputs.latestImage }}

    steps:
      - name: 📋 Log Inputs
        id: log-inputs
        run: |
          echo "🔹 Region      : ${{ inputs.aws-region }}"
          echo "🔹 Role        : ${{ inputs.aws-role-to-assume }}"
          echo "🔹 Image Name  : ${{ inputs.image-name }}"
          echo "🔹 Image Tag   : ${{ inputs.image-tag }}"
          echo "🔹 Build Spec  : ${{ inputs.build-spec }}"
          echo "🔹 Build Args  : ${{ toJson(inputs.build-args) }}"

          echo "region=$(echo '${{ inputs.aws-region }}' | xargs)" >> $GITHUB_OUTPUT
          echo "role=$(echo '${{ inputs.aws-role-to-assume }}' | xargs)" >> $GITHUB_OUTPUT

      - name: 🗒️ Checkout Source
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.log-inputs.outputs.role }}
          aws-region: ${{ steps.log-inputs.outputs.region }}

      - name: 🔐 Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📦 Cache Docker Layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ inputs.image-name }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 🏗️ Build and Push with Buildx
        id: buildx
        run: |
          set -euo pipefail

          REGISTRY="${{ steps.ecr.outputs.registry }}"
          IMAGE_NAME="${{ inputs.image-name }}"
          IMAGE_TAG="${{ inputs.image-tag }}"
          DOCKERFILE="${{ inputs.build-spec }}"
          INPUT_BUILD_ARGS="${{ inputs.build-args }}"

          # Determine latest tag variant
          if [[ "$DOCKERFILE" == *.baseimage ]]; then
            LATEST_TAG="baseimage-latest"
          elif [[ "$DOCKERFILE" == *.testimage ]]; then
            LATEST_TAG="testimage-latest"
          else
            LATEST_TAG="latest"
          fi

          # Safely parse build args
          BUILD_ARGS=""
          if [[ -n "$INPUT_BUILD_ARGS" ]]; then
            read -ra ARG_ARRAY <<< "$INPUT_BUILD_ARGS"
            for arg in "${ARG_ARRAY[@]}"; do
              BUILD_ARGS+="--build-arg $arg "
            done
          fi

          echo "⏳ Building $REGISTRY/$IMAGE_NAME:$IMAGE_TAG from $DOCKERFILE"

          docker buildx build \
            --file "$DOCKERFILE" \
            $BUILD_ARGS \
            --tag "$REGISTRY/$IMAGE_NAME:$IMAGE_TAG" \
            --tag "$REGISTRY/$IMAGE_NAME:$LATEST_TAG" \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new \
            --push .

          # Rotate cache
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

          echo "taggedImage=$REGISTRY/$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "latestImage=$REGISTRY/$IMAGE_NAME:$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: ✅ Summary
        run: |
          echo "::notice::Tagged  : ${{ steps.buildx.outputs.taggedImage }}"
          echo "::notice::Latest  : ${{ steps.buildx.outputs.latestImage }}"
