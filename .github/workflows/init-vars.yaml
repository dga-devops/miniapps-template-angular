name: 🔧 Init Variables

on:
  workflow_call:
    inputs:
      config-path:
        required: false
        type: string
        default: .github-ci.yaml

    outputs:
      environment:
        value: ${{ jobs.set.outputs.environment }}
      is-pull-request:
        value: ${{ jobs.set.outputs.is-pull-request }}
      is-merge:
        value: ${{ jobs.set.outputs.is-merge }}
      run-unit-test:
        value: ${{ jobs.set.outputs.run-unit-test }}
      ignore-unit-test-error:
        value: ${{ jobs.set.outputs.ignore-unit-test-error }}
      test-image-name:
        value: ${{ jobs.set.outputs.test-image-name }}
      test-image-tag:
        value: ${{ jobs.set.outputs.test-image-tag }}
      run-sonar:
        value: ${{ jobs.set.outputs.run-sonar }}
      ignore-sonar-quality:
        value: ${{ jobs.set.outputs.ignore-sonar-quality }}
      sonar-project-key:
        value: ${{ jobs.set.outputs.sonar-project-key }}
      sonar-host-url:
        value: ${{ jobs.set.outputs.sonar-host-url }}
      sonar-scan-source-code-target:
        value: ${{ jobs.set.outputs.sonar-scan-source-code-target }}
      image-name:
        value: ${{ jobs.set.outputs.image-name }}
      image-tag:
        value: ${{ jobs.set.outputs.image-tag }}
      build-spec:
        value: ${{ jobs.set.outputs.build-spec }}
      build-env:
        value: ${{ jobs.set.outputs.build-env }}
      aws-region:
        value: ${{ jobs.set.outputs.aws-region }}
      aws-role-to-assume:
        value: ${{ jobs.set.outputs.aws-role-to-assume }}
      cluster-name:
        value: ${{ jobs.set.outputs.cluster-name }}
      service-name:
        value: ${{ jobs.set.outputs.service-name }}
      task-definition:
        value: ${{ jobs.set.outputs.task-definition }}
      container-name:
        value: ${{ jobs.set.outputs.container-name }}
      domain:
        value: ${{ jobs.set.outputs.domain }}
      sub-domain:
        value: ${{ jobs.set.outputs.sub-domain }}
      path-pattern:
        value: ${{ jobs.set.outputs.path-pattern }}
      is-test:
        value: ${{ jobs.set.outputs.is-test }}
      is-scan:
        value: ${{ jobs.set.outputs.is-scan }}
      is-build:
        value: ${{ jobs.set.outputs.is-build }}
      is-deploy:
        value: ${{ jobs.set.outputs.is-deploy }}

jobs:
  set:
    timeout-minutes: 5
    runs-on: self-hosted
    outputs:
      environment: ${{ steps.set-vars.outputs.environment }}
      is-pull-request: ${{ steps.set-vars.outputs.isPullRequest }}
      is-merge: ${{ steps.set-vars.outputs.isMerge }}
      run-unit-test: ${{ steps.set-vars.outputs.runUnitTest }}
      ignore-unit-test-error: ${{ steps.set-vars.outputs.ignoreUnitTestError }}
      test-image-name: ${{ steps.set-vars.outputs.testImageName }}
      test-image-tag: ${{ steps.set-vars.outputs.testImageTag }}
      run-sonar: ${{ steps.set-vars.outputs.runSonar }}
      ignore-sonar-quality: ${{ steps.set-vars.outputs.ignoreSonarQuality }}
      sonar-project-key: ${{ steps.set-vars.outputs.sonarProjectKey }}
      sonar-host-url: ${{ steps.set-vars.outputs.sonarHostUrl }}
      sonar-scan-source-code-target: ${{ steps.set-vars.outputs.sonarScanSourceCodeTarget }}
      image-name: ${{ steps.set-vars.outputs.imageName }}
      image-tag: ${{ steps.set-vars.outputs.imageTag }}
      build-spec: ${{ steps.set-vars.outputs.buildSpec }}
      build-env: ${{ steps.set-vars.outputs.buildEnv }}
      aws-region: ${{ steps.set-vars.outputs.awsRegion }}
      aws-role-to-assume: ${{ steps.set-vars.outputs.awsRoleToAssume }}
      cluster-name: ${{ steps.set-vars.outputs.clusterName }}
      service-name: ${{ steps.set-vars.outputs.serviceName }}
      task-definition: ${{ steps.set-vars.outputs.taskDefinition }}
      container-name: ${{ steps.set-vars.outputs.containerName }}
      domain: ${{ steps.set-vars.outputs.domain }}
      sub-domain: ${{ steps.set-vars.outputs.subDomain }}
      path-pattern: ${{ steps.set-vars.outputs.pathPattern }}
      is-test: ${{ steps.set-vars.outputs.isTest }}
      is-scan: ${{ steps.set-vars.outputs.isScan }}
      is-build: ${{ steps.set-vars.outputs.isBuild }}
      is-deploy: ${{ steps.set-vars.outputs.isDeploy }}

    steps:
      - name: 📥 Install yq
        run: sudo apt-get install -y yq

      - name: 🗂️ Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set Variables
        id: set-vars
        shell: bash
        run: |
          set -euo pipefail

          echo "🔍 Loading config: ${{ inputs.config-path }}"
          configPath="${{ inputs.config-path }}"
          if [[ ! -f "$configPath" ]]; then
            echo "❌ Config file not found: $configPath"
            exit 1
          fi

          # Short commit ref
          shortCommit="${GITHUB_SHA::7}"

          # Init default values
          environment="unknown"
          isPullRequest="false"
          isMerge="false"
          isTag="false"
          isDeploy="false"
          imageTag="unknown-${shortCommit}"
          buildSpec="Dockerfile"
          buildEnv="develop"
          isBuild="true"

          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            case "$GITHUB_BASE_REF" in
              "develop") environment="dev"; imageTag="dev-${shortCommit}" ;;
              "main")    environment="uat"; imageTag="uat-${shortCommit}" ;;
            esac
            isPullRequest="true"
            isBuild="false"
            if [[ "$GITHUB_EVENT_ACTION" == "closed" ]]; then
              if [[ "$(jq -r '.pull_request.merged' "$GITHUB_EVENT_PATH")" == "true" ]]; then
                isMerge="true"
                isBuild="true"
                isDeploy="true"
              fi
            fi

          elif [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            if [[ "$GITHUB_REF" == refs/heads/develop ]]; then
              environment="dev"; buildEnv="develop"; imageTag="dev-${shortCommit}"; isDeploy="true"
            elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
              environment="uat"; buildEnv="uat"; imageTag="uat-${shortCommit}"; isDeploy="true"
            elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
              tagName="${GITHUB_REF#refs/tags/}"
              isTag="true"
              case "$tagName" in
                baseimage-*)  environment="baseimage"; buildEnv="base"; buildSpec="Dockerfile.baseimage"; imageTag="$tagName" ;;
                testimage-*)  environment="testimage"; buildEnv="test"; buildSpec="Dockerfile.testimage"; imageTag="$tagName" ;;
                v[0-9]*.[0-9]*.[0-9]*) environment="prod"; buildEnv="production"; imageTag="$tagName" ;;
                *) environment="dev"; buildEnv="develop"; imageTag="dev-${tagName}" ;;
              esac
            else
              refName="${GITHUB_REF#refs/heads/}"
              environment="feature"
              buildEnv="develop"
              imageTag="feature-${shortCommit}-${refName//\//-}"
            fi

          elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
            isDeploy="true"
            environment="${{ github.event.inputs.environment }}"
            imageTag="${{ github.event.inputs.image-tag }}"
          fi

          # Read from config
          read_yaml() { yq ".$1" "$configPath" | tr -d '"' | tr '[:upper:]' '[:lower:]' | xargs; }

          imageName=$(read_yaml "env.IMAGE_NAME")
          runUnitTest=$(read_yaml "env.RUN_UNIT_TEST")
          ignoreUnitTestError=$(read_yaml "env.IGNORE_UNIT_TEST_ERROR")
          testImageName=$(read_yaml "env.TEST_IMAGE_NAME")
          testImageTag=$(read_yaml "env.TEST_IMAGE_TAG")
          runSonar=$(read_yaml "env.RUN_SONAR")
          ignoreSonarQuality=$(read_yaml "env.IGNORE_SONAR_QUALITY")
          sonarProjectKey=$(read_yaml "env.SONAR_PROJECT_KEY")
          sonarHostUrl=$(read_yaml "env.SONAR_HOST_URL")
          sonarScanSourceCodeTarget=$(read_yaml "env.SONAR_SCAN_SOURCE_CODE_TARGET")
          name=$(read_yaml "env.NAME")
          awsRegion=$(read_yaml "env.AWS_REGION")
          awsRoleToAssume=$(read_yaml "env.AWS_ROLE_TO_ASSUME")
          domain=$(read_yaml "env.DOMAIN")
          subDomain=$(read_yaml "env.SUB_DOMAIN")
          pathPattern=$(read_yaml "env.PATH_PATTERN")

          # Validate required values
          [[ -z "$imageName" || -z "$awsRoleToAssume" || -z "$name" ]] && {
            echo "❌ Required config missing (IMAGE_NAME, AWS_ROLE_TO_ASSUME, NAME)"
            exit 1
          }

          clusterName="miniapps-cluster-${environment}"
          serviceName="${name}-${environment}"
          taskDefinition="${name}-${environment}"
          containerName="${name}-${environment}"

          [[ "$runUnitTest" == "true" && "$isMerge" == "false" && "$isTag" == "false" ]] && isTest="true" || isTest="false"
          [[ "$runSonar" == "true" && "$isMerge" == "false" && "$isTag" == "false" ]] && isScan="true" || isScan="false"

          # Output all
          for var in \
            environment isPullRequest isMerge isTag isDeploy isBuild isTest isScan \
            imageName imageTag buildSpec buildEnv runUnitTest ignoreUnitTestError \
            testImageName testImageTag runSonar ignoreSonarQuality sonarProjectKey sonarHostUrl sonarScanSourceCodeTarget \
            awsRegion awsRoleToAssume clusterName serviceName taskDefinition containerName domain subDomain pathPattern
          do
            echo "$var=${!var}" >> "$GITHUB_OUTPUT"
          done

      - name: 📋 Summary
        run: |
          echo "🔧 Environment Info"
          echo "  🏷️ Environment        : ${{ steps.set-vars.outputs.environment }}"
          echo "  🔁 Is Pull Request    : ${{ steps.set-vars.outputs.isPullRequest }}"
          echo "  🔀 Is Merge           : ${{ steps.set-vars.outputs.isMerge }}"
          echo "  🏷️ Is Tag             : ${{ steps.set-vars.outputs.isTag }}"
          
          echo ""
          echo "🧪 Unit Test Config"
          echo "  ✅ Run Unit Test       : ${{ steps.set-vars.outputs.runUnitTest }}"
          echo "  🚫 Ignore Test Error   : ${{ steps.set-vars.outputs.ignoreUnitTestError }}"
          echo "  🐳 Test Image Name     : ${{ steps.set-vars.outputs.testImageName }}"
          echo "  🏷️ Test Image Tag      : ${{ steps.set-vars.outputs.testImageTag }}"
          
          echo ""
          echo "🔍 SonarQube Scan"
          echo "  📦 Run Sonar           : ${{ steps.set-vars.outputs.runSonar }}"
          echo "  🚫 Ignore Quality      : ${{ steps.set-vars.outputs.ignoreSonarQuality }}"
          echo "  🗝️ Project Key         : ${{ steps.set-vars.outputs.sonarProjectKey }}"
          echo "  🌐 Host URL            : ${{ steps.set-vars.outputs.sonarHostUrl }}"
          echo "  📁 Scan Target         : ${{ steps.set-vars.outputs.sonarScanSourceCodeTarget }}"
          
          echo ""
          echo "📦 Build & Push Info"
          echo "  🐳 Image Name          : ${{ steps.set-vars.outputs.imageName }}"
          echo "  🏷️ Image Tag           : ${{ steps.set-vars.outputs.imageTag }}"
          echo "  📝 Build Spec          : ${{ steps.set-vars.outputs.buildSpec }}"
          echo "  🌱 Build Env           : ${{ steps.set-vars.outputs.buildEnv }}"
          
          echo ""
          echo "☁️ AWS Deployment"
          echo "  🌍 AWS Region          : ${{ steps.set-vars.outputs.awsRegion }}"
          echo "  🔐 Role to Assume      : ${{ steps.set-vars.outputs.awsRoleToAssume }}"
          echo "  📦 Cluster Name        : ${{ steps.set-vars.outputs.clusterName }}"
          echo "  🛠️ Service Name        : ${{ steps.set-vars.outputs.serviceName }}"
          echo "  🧩 Task Definition     : ${{ steps.set-vars.outputs.taskDefinition }}"
          echo "  📦 Container Name      : ${{ steps.set-vars.outputs.containerName }}"
          
          echo ""
          echo "🌐 Domain Routing"
          echo "  🌐 Domain              : ${{ steps.set-vars.outputs.domain }}"
          echo "  🧭 Sub Domain          : ${{ steps.set-vars.outputs.subDomain }}"
          echo "  🚏 Path Pattern        : ${{ steps.set-vars.outputs.pathPattern }}"
          
          echo ""
          echo "🔁 Workflow Switches"
          echo "  🧪 Is Test             : ${{ steps.set-vars.outputs.isTest }}"
          echo "  🔍 Is Scan             : ${{ steps.set-vars.outputs.isScan }}"
          echo "  🔁 Is Build            : ${{ steps.set-vars.outputs.isBuild }}"
          echo "  🏗️ Is Deploy           : ${{ steps.set-vars.outputs.isDeploy }}"
